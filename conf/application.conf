# add or override properties
# See https://github.com/typesafehub/config/blob/master/HOCON.md for more details

db = "mongodb://localhost/mydb"

###################################################################################################
#! application
###################################################################################################
application {

  # environment default is: dev
  env = dev

  # contains the simple name of the Application class. set it at runtime
  # name = App.class.getSimpleName()

  # application namespace, default to app package. set it at runtime
  # ns = App.class.getPackage().getName()

  # tmpdir
  tmpdir = ${java.io.tmpdir}/${application.name}

  # path (a.k.a. as contextPath)
  path = /

  # localhost
  host = localhost

  # default port is: 8080
  port = 8080

#  externalUrl = "https://192.168.0.71:8443/"
  externalUrl = "https://localhost:8443/"

  securePort = 8443

  # we do UTF-8
  charset = UTF-8

  # date format
  dateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"

  # number format, system default. set it at runtime
  # numberFormat = DecimalFormat.getInstance(${application.lang})).toPattern()

  # lang (a.k.a locale), system default. set it at runtime
  # lang = Locale.getDefault()

  # timezone, system default. set it at runtime
  # tz = ZoneId.systemDefault().getId()

  # redirect to/force https
  # example: https://my.domain.com/{0}
  redirect_https = ${application.externalUrl}"{0}"

  secret = d6bbe1a4-f6c6-11e6-bc64-92361f002671
}

ssl {
#
#  # An X.509 certificate chain file in PEM format, provided certificate should NOT be used in prod.
#  keystore.cert = org/jooby/unsecure.crt
#
#  # A PKCS#8 private key file in PEM format, provided key should NOT be used in prod.
#  keystore.key = org/jooby/unsecure.key
#
#  # password of the keystore.key (if any)
#  # keystore.password =
#  # Trusted certificates for verifying the remote endpoint's certificate. The file should
#  # contain an X.509 certificate chain in PEM format. Default uses the system default.
#  # trust.cert =
#  # Set the size of the cache used for storing SSL session objects. 0 to use the
#  # default value.
#  session.cacheSize = 0
#
#  # Timeout for the cached SSL session objects, in seconds. 0 to use the default value.
  #session.timeout = 28800

}

###################################################################################################
#! session defaults
###################################################################################################
session {
  # we suggest a timeout, but usage and an implementation is specific to a Session.Store implementation
  timeout = 8h

  # save interval, how frequently we must save a none-dirty session (in millis).
  saveInterval = 60s

  cookie {
    # name of the cookie
    name = jooby.sid

    # cookie path
    path = /

    # expires when the user closes the web browser
    maxAge = -1

    httpOnly = true

    secure = true
  }
}

###################################################################################################
#! server defaults
###################################################################################################
server {
  http {

    HeaderSize = 8k

    # Max response buffer size
    ResponseBufferSize = 16k

    MaxRequestSize = 1024k

    IdleTimeout = 30s

    Method = _method
  }

  threads {
    Min = 20
    Max = 200
    IdleTimeout = 60s
  }

  ws {
    # The maximum size of a text message.
    MaxTextMessageSize = 16k

    # The maximum size of a binary message.
    MaxBinaryMessageSize = 16k

    # The time in ms (milliseconds) that a websocket may be idle before closing.
    IdleTimeout = 5minutes
  }
}

###################################################################################################
#! assets
###################################################################################################
#! If asset CDN is present, the asset router will do a redirect to CDN and wont serve the file locally
#! /assets/js/index.js -> redirectTo(cdn + assets/js/index.js)
assets.cdn = ""

###################################################################################################
#! Cross origin resource sharing
###################################################################################################
cors {
  # Configures the Access-Control-Allow-Origin CORS header. Possibly values: *, domain, regex or a list of previous values.
  # Example:
  # "*"
  # ["http://foo.com"]
  # ["http://*.com"]
  # ["http://foo.com", "http://bar.com"]
  origin: "*"

  # If true, set the Access-Control-Allow-Credentials header
  credentials: true

  # Allowed methods: Set the Access-Control-Allow-Methods header
  allowedMethods: [GET, POST]

  # Allowed headers: set the Access-Control-Allow-Headers header. Possibly values: *, header name or a list of previous values.
  # Examples
  # "*"
  # Custom-Header
  # [Header-1, Header-2]
  allowedHeaders: [X-Requested-With, Content-Type, Accept, Origin]

  # Preflight max age: number of seconds that preflight requests can be cached by the client
  maxAge: 30m

  # Set the Access-Control-Expose-Headers header
  # exposedHeaders: []
}

###################################################################################################
#! runtime
###################################################################################################

#! number of available processors, set it at runtime
#! runtime.processors = Runtime.getRuntime().availableProcessors()
#! runtime.processors-plus1 = ${runtime.processors} + 1
#! runtime.processors-plus2 = ${runtime.processors} + 2
#! runtime.processors-x2 = ${runtime.processors} * 2

###################################################################################################
#! status codes
###################################################################################################
err.java.lang.IllegalArgumentException = 400
err.java.util.NoSuchElementException = 400
err.java.io.FileNotFoundException = 404

google {
  key     = 830848061924-9vho34679u5n7tre5lltfhsuqpjc4sp4.apps.googleusercontent.com
  secret  = l7w3vTUbJrFBGxNaq7YnYYYj
  map.key = AIzaSyBKqnvhVIViyBaeYvhPux7JVGKBQSnUbTU
  analytics.key = UA-101113739-1
}

yandex {
  shopId = 132295
  scid = 554815
}

vk {
  key     = 5201195
  secret  = ioAO741H5w8CepqPgWFj
}

facebook {
  key     = 906528319444296
  secret  = 160b63d57d0b63e9a4af562c6a6b9a6e
}

twitter {
  key     = Lpy5u9AJhDQKS603YYRq9Flok
  secret  = 7isNxhB1xtPTFsYvCoQBSCbli9VYf6qgdn6dGW6MTgLebWTtN0
}

auth {

  # default callback, like http://localhost:8080/auth
  callback = ${application.externalUrl}auth

  # login options
  login {

    # Where to go after a successful login?
    #redirectTo = /

  }

  # logout options
  logout {

    url = /logout

    redirectTo = /

  }

  # form auth
  form {
    loginUrl = /login
  }

}

swagger {

  info {

    title: �������

  }

  basePath: ${application.path}

  consumes: ["application/json"]

  produces: ["application/json"]

  schemes: ["https"]

}

server.join=false

contextPath = ${application.path}

smsaero {
  endpoint: "https://gate.smsaero.ru"
  user: "igolnikovilya@gmail.com"
  password: zkefQdvtnQmht6XlwSt52rhZsn6S
}
